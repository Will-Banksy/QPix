/*
 * This is a Qt style sheet. This style sheet will be the default style for my application
 *
 * Animations workaround?: https://stackoverflow.com/questions/40287398/pyqt5-stylesheet-animation
 *
 * Variables (for colours) are defined in colours.json
 */

* {
	background-color: @back-dark;
	color: @text;
	border: none;
	outline: none;
	margin: 0;
	padding: 0;
}

/* QToolButton (and subclasses) styles */
QToolButton {
	border: none;
	background: none;
	background-color: @button-normal;
	color: black;
	border-radius: 2px;
}

QToolButton:pressed {
	border: none;
	background-color: @button-hover;
}

QToolButton:hover {
	border: none;
	background-color: @button-hover;
}

QToolButton:checked {
	border: 2px solid @accent;
	background-color: @button-normal;
}

QToolButton:checked:hover {
	border: 2px solid @accent;
	background-color: @button-hover;
}

/* QGraphicsView (and subclasses) styles */
QGraphicsView {
	border: 1px solid @button-hover;
	border-radius: 2px;
}

/* QDockWidget (and subclasses) styles */
QDockWidget {
	titlebar-close-icon: url(:/placeholder.png); /* You CAN put a list of icons and their states here, but there isn't a unique 'hover' and 'pressed' state */
	titlebar-normal-icon: url(:/placeholder.png);
}

QDockWidget::close-button,
QDockWidget::float-button {
	background: none;
	border: none;
}

/* And because there isn't those unique states, I'm just doing this as a workaround */
QDockWidget::close-button {
	image: url(:/close.png);
}
QDockWidget::close-button:hover {
	image: url(:/close-hover.png);
}
QDockWidget::close-button:pressed {
	image: url(:/close-pressed.png);
}

QDockWidget::float-button {
	image: url(:/float.png);
}
QDockWidget::float-button:hover {
	image: url(:/float-hover.png);
}
QDockWidget::float-button:pressed {
	image: url(:/float-pressed.png);
}

QDockWidget::title {
	color: @text;
	border: 1px solid @button-hover;
	border-bottom: none;
	padding: 3px 6px 3px 6px;
	border-top-left-radius: 2px;
	border-top-right-radius: 2px;
}

.DockContent { /* The dot followed by a name targets all widgets that have that name as their class property (by default, it seems the class property of a QWidget is it's class name, for example QDockWidget or QToolButton) */
	border: 1px solid @button-hover;
	border-top: none;
	border-bottom-left-radius: 2px;
	border-bottom-right-radius: 2px;
}

/*QMainWindow::separator { Use this to style the separator/splitter between QDockWidgets and other widgets in QMainWindow
	background: @accent;
}*/

/* QScrollBar (and subclasses) styles */
QScrollBar:horizontal {
/* 	height: 10px; If you change the height, the widget doesn't register it as such, so that you can scroll 'off' what you're scrolling on, where you see background where the scroll bar would cover if it didn't have it's size set here */
	border-top: 1px solid @button-normal;
}

QScrollBar::handle:horizontal {
	min-width: 20px;
	border-image: url(:/scrollbar-hor-normal.png) 7 8 7 8;
	border: 7px transparent;
}

QScrollBar::handle:horizontal:hover {
	border-image: url(:/scrollbar-hor-hover.png) 7 8 7 8;
}

QScrollBar::handle:vertical {
	min-height: 20px;
	border-image: url(:/scrollbar-ver-normal.png) 8 7 8 7;
	border: 7px transparent;
}

QScrollBar::handle:vertical:hover {
	border-image: url(:/scrollbar-ver-hover.png) 8 7 8 7;
}

QScrollBar::add-line {
	width: 0px;
	height: 0px;
}

QScrollBar::sub-line {
	width: 0px;
	height: 0px;
}

QScrollBar:vertical {
	border-left: 1px solid @button-normal;
}

/* TODO: Need to actually style menus - remember to disable global menu bar for testing */

QMenu {
	background-color: @back-dark;
	/*border-top: 1px solid @button-normal;
	border-bottom: 1px solid @button-normal;*/
	border-radius: 2px;
}

QMenu::item {
	margin: 0px;
	padding: 2px 5px 2px 5px;
	border-left: 1px solid @button-normal;
	border-right: 1px solid @button-normal;
}

*[isFirstChild="true"] {
	border-top: 1px solid @button-normal;
	border-radius: 2px 2px 0px 0px;
}

/*QMenu::item:last-child {
	border-bottom: 1px solid @button-normal;
	border-radius: 0px 0px 2px 2px;
}

QMenu::item:first-child {
	border-top: 1px solid @button-normal;
	border-radius: 2px 2px 0px 0px;
}*/

QMenu::item:selected {
	background-color: @accent;
	border-color: @accent;
}

QMenuBar::item {
	margin: 0px;
	padding: 2px 5px 2px 5px;
}